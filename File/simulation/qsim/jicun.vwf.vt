// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/18/2020 08:16:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    jicun
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module jicun_vlg_sample_tst(
	A_01,
	clk_01,
	sampler_tx
);
input  A_01;
input  clk_01;
output sampler_tx;

reg sample;
time current_time;
always @(A_01 or clk_01)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module jicun_vlg_check_tst (
	QA,
	QB,
	QE,
	sampler_rx
);
input  QA;
input  QB;
input  QE;
input sampler_rx;

reg  QA_expected;
reg  QB_expected;
reg  QE_expected;

reg  QA_prev;
reg  QB_prev;
reg  QE_prev;

reg  QA_expected_prev;
reg  QB_expected_prev;
reg  QE_expected_prev;

reg  last_QA_exp;
reg  last_QB_exp;
reg  last_QE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	QA_prev = QA;
	QB_prev = QB;
	QE_prev = QE;
end

// update expected /o prevs

always @(trigger)
begin
	QA_expected_prev = QA_expected;
	QB_expected_prev = QB_expected;
	QE_expected_prev = QE_expected;
end



// expected QA
initial
begin
	QA_expected = 1'bX;
end 

// expected QB
initial
begin
	QB_expected = 1'bX;
end 

// expected QE
initial
begin
	QE_expected = 1'bX;
end 
// generate trigger
always @(QA_expected or QA or QB_expected or QB or QE_expected or QE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected QA = %b | expected QB = %b | expected QE = %b | ",QA_expected_prev,QB_expected_prev,QE_expected_prev);
	$display("| real QA = %b | real QB = %b | real QE = %b | ",QA_prev,QB_prev,QE_prev);
`endif
	if (
		( QA_expected_prev !== 1'bx ) && ( QA_prev !== QA_expected_prev )
		&& ((QA_expected_prev !== last_QA_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QA_expected_prev);
		$display ("     Real value = %b", QA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_QA_exp = QA_expected_prev;
	end
	if (
		( QB_expected_prev !== 1'bx ) && ( QB_prev !== QB_expected_prev )
		&& ((QB_expected_prev !== last_QB_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QB_expected_prev);
		$display ("     Real value = %b", QB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_QB_exp = QB_expected_prev;
	end
	if (
		( QE_expected_prev !== 1'bx ) && ( QE_prev !== QE_expected_prev )
		&& ((QE_expected_prev !== last_QE_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QE_expected_prev);
		$display ("     Real value = %b", QE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_QE_exp = QE_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module jicun_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A_01;
reg clk_01;
// wires                                               
wire QA;
wire QB;
wire QE;

wire sampler;                             

// assign statements (if any)                          
jicun i1 (
// port map - connection between master ports and signals/registers   
	.A_01(A_01),
	.clk_01(clk_01),
	.QA(QA),
	.QB(QB),
	.QE(QE)
);

// A_01
initial
begin
	A_01 = 1'b1;
end 

// clk_01
always
begin
	clk_01 = 1'b0;
	clk_01 = #5000 1'b1;
	#5000;
end 

jicun_vlg_sample_tst tb_sample (
	.A_01(A_01),
	.clk_01(clk_01),
	.sampler_tx(sampler)
);

jicun_vlg_check_tst tb_out(
	.QA(QA),
	.QB(QB),
	.QE(QE),
	.sampler_rx(sampler)
);
endmodule

