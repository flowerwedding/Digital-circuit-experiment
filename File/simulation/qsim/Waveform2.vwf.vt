// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/23/2020 13:36:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cnt60
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cnt60_vlg_sample_tst(
	clk_01,
	CR_1,
	sampler_tx
);
input  clk_01;
input  CR_1;
output sampler_tx;

reg sample;
time current_time;
always @(clk_01 or CR_1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cnt60_vlg_check_tst (
	CO_01,
	ge_01,
	shi_01,
	sampler_rx
);
input  CO_01;
input [3:0] ge_01;
input [3:0] shi_01;
input sampler_rx;

reg  CO_01_expected;
reg [3:0] ge_01_expected;
reg [3:0] shi_01_expected;

reg  CO_01_prev;
reg [3:0] ge_01_prev;
reg [3:0] shi_01_prev;

reg  CO_01_expected_prev;
reg [3:0] ge_01_expected_prev;
reg [3:0] shi_01_expected_prev;

reg  last_CO_01_exp;
reg [3:0] last_ge_01_exp;
reg [3:0] last_shi_01_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	CO_01_prev = CO_01;
	ge_01_prev = ge_01;
	shi_01_prev = shi_01;
end

// update expected /o prevs

always @(trigger)
begin
	CO_01_expected_prev = CO_01_expected;
	ge_01_expected_prev = ge_01_expected;
	shi_01_expected_prev = shi_01_expected;
end



// expected CO_01
initial
begin
	CO_01_expected = 1'bX;
end 
// expected ge_01[ 3 ]
initial
begin
	ge_01_expected[3] = 1'bX;
end 
// expected ge_01[ 2 ]
initial
begin
	ge_01_expected[2] = 1'bX;
end 
// expected ge_01[ 1 ]
initial
begin
	ge_01_expected[1] = 1'bX;
end 
// expected ge_01[ 0 ]
initial
begin
	ge_01_expected[0] = 1'bX;
end 
// expected shi_01[ 3 ]
initial
begin
	shi_01_expected[3] = 1'bX;
end 
// expected shi_01[ 2 ]
initial
begin
	shi_01_expected[2] = 1'bX;
end 
// expected shi_01[ 1 ]
initial
begin
	shi_01_expected[1] = 1'bX;
end 
// expected shi_01[ 0 ]
initial
begin
	shi_01_expected[0] = 1'bX;
end 
// generate trigger
always @(CO_01_expected or CO_01 or ge_01_expected or ge_01 or shi_01_expected or shi_01)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CO_01 = %b | expected ge_01 = %b | expected shi_01 = %b | ",CO_01_expected_prev,ge_01_expected_prev,shi_01_expected_prev);
	$display("| real CO_01 = %b | real ge_01 = %b | real shi_01 = %b | ",CO_01_prev,ge_01_prev,shi_01_prev);
`endif
	if (
		( CO_01_expected_prev !== 1'bx ) && ( CO_01_prev !== CO_01_expected_prev )
		&& ((CO_01_expected_prev !== last_CO_01_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CO_01 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CO_01_expected_prev);
		$display ("     Real value = %b", CO_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CO_01_exp = CO_01_expected_prev;
	end
	if (
		( ge_01_expected_prev[0] !== 1'bx ) && ( ge_01_prev[0] !== ge_01_expected_prev[0] )
		&& ((ge_01_expected_prev[0] !== last_ge_01_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ge_01[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ge_01_expected_prev);
		$display ("     Real value = %b", ge_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ge_01_exp[0] = ge_01_expected_prev[0];
	end
	if (
		( ge_01_expected_prev[1] !== 1'bx ) && ( ge_01_prev[1] !== ge_01_expected_prev[1] )
		&& ((ge_01_expected_prev[1] !== last_ge_01_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ge_01[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ge_01_expected_prev);
		$display ("     Real value = %b", ge_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ge_01_exp[1] = ge_01_expected_prev[1];
	end
	if (
		( ge_01_expected_prev[2] !== 1'bx ) && ( ge_01_prev[2] !== ge_01_expected_prev[2] )
		&& ((ge_01_expected_prev[2] !== last_ge_01_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ge_01[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ge_01_expected_prev);
		$display ("     Real value = %b", ge_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ge_01_exp[2] = ge_01_expected_prev[2];
	end
	if (
		( ge_01_expected_prev[3] !== 1'bx ) && ( ge_01_prev[3] !== ge_01_expected_prev[3] )
		&& ((ge_01_expected_prev[3] !== last_ge_01_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ge_01[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ge_01_expected_prev);
		$display ("     Real value = %b", ge_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ge_01_exp[3] = ge_01_expected_prev[3];
	end
	if (
		( shi_01_expected_prev[0] !== 1'bx ) && ( shi_01_prev[0] !== shi_01_expected_prev[0] )
		&& ((shi_01_expected_prev[0] !== last_shi_01_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shi_01[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shi_01_expected_prev);
		$display ("     Real value = %b", shi_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_shi_01_exp[0] = shi_01_expected_prev[0];
	end
	if (
		( shi_01_expected_prev[1] !== 1'bx ) && ( shi_01_prev[1] !== shi_01_expected_prev[1] )
		&& ((shi_01_expected_prev[1] !== last_shi_01_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shi_01[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shi_01_expected_prev);
		$display ("     Real value = %b", shi_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_shi_01_exp[1] = shi_01_expected_prev[1];
	end
	if (
		( shi_01_expected_prev[2] !== 1'bx ) && ( shi_01_prev[2] !== shi_01_expected_prev[2] )
		&& ((shi_01_expected_prev[2] !== last_shi_01_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shi_01[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shi_01_expected_prev);
		$display ("     Real value = %b", shi_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_shi_01_exp[2] = shi_01_expected_prev[2];
	end
	if (
		( shi_01_expected_prev[3] !== 1'bx ) && ( shi_01_prev[3] !== shi_01_expected_prev[3] )
		&& ((shi_01_expected_prev[3] !== last_shi_01_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shi_01[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shi_01_expected_prev);
		$display ("     Real value = %b", shi_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_shi_01_exp[3] = shi_01_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cnt60_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_01;
reg CR_1;
// wires                                               
wire CO_01;
wire [3:0] ge_01;
wire [3:0] shi_01;

wire sampler;                             

// assign statements (if any)                          
cnt60 i1 (
// port map - connection between master ports and signals/registers   
	.clk_01(clk_01),
	.CO_01(CO_01),
	.CR_1(CR_1),
	.ge_01(ge_01),
	.shi_01(shi_01)
);

// clk_01
always
begin
	clk_01 = 1'b0;
	clk_01 = #5000 1'b1;
	#5000;
end 

// CR_1
always
begin
	CR_1 = 1'b0;
	CR_1 = #500000 1'b1;
	#500000;
end 

cnt60_vlg_sample_tst tb_sample (
	.clk_01(clk_01),
	.CR_1(CR_1),
	.sampler_tx(sampler)
);

cnt60_vlg_check_tst tb_out(
	.CO_01(CO_01),
	.ge_01(ge_01),
	.shi_01(shi_01),
	.sampler_rx(sampler)
);
endmodule

