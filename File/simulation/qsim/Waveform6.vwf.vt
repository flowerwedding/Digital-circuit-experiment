// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/23/2020 13:28:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sys_choice
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sys_choice_vlg_sample_tst(
	A0_01,
	A1_01,
	choice_01,
	sampler_tx
);
input [3:0] A0_01;
input [3:0] A1_01;
input  choice_01;
output sampler_tx;

reg sample;
time current_time;
always @(A0_01 or A1_01 or choice_01)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sys_choice_vlg_check_tst (
	B_01,
	sampler_rx
);
input [3:0] B_01;
input sampler_rx;

reg [3:0] B_01_expected;

reg [3:0] B_01_prev;

reg [3:0] B_01_expected_prev;

reg [3:0] last_B_01_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	B_01_prev = B_01;
end

// update expected /o prevs

always @(trigger)
begin
	B_01_expected_prev = B_01_expected;
end


// expected B_01[ 3 ]
initial
begin
	B_01_expected[3] = 1'bX;
end 
// expected B_01[ 2 ]
initial
begin
	B_01_expected[2] = 1'bX;
end 
// expected B_01[ 1 ]
initial
begin
	B_01_expected[1] = 1'bX;
end 
// expected B_01[ 0 ]
initial
begin
	B_01_expected[0] = 1'bX;
end 
// generate trigger
always @(B_01_expected or B_01)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected B_01 = %b | ",B_01_expected_prev);
	$display("| real B_01 = %b | ",B_01_prev);
`endif
	if (
		( B_01_expected_prev[0] !== 1'bx ) && ( B_01_prev[0] !== B_01_expected_prev[0] )
		&& ((B_01_expected_prev[0] !== last_B_01_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_01[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_01_expected_prev);
		$display ("     Real value = %b", B_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_B_01_exp[0] = B_01_expected_prev[0];
	end
	if (
		( B_01_expected_prev[1] !== 1'bx ) && ( B_01_prev[1] !== B_01_expected_prev[1] )
		&& ((B_01_expected_prev[1] !== last_B_01_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_01[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_01_expected_prev);
		$display ("     Real value = %b", B_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_B_01_exp[1] = B_01_expected_prev[1];
	end
	if (
		( B_01_expected_prev[2] !== 1'bx ) && ( B_01_prev[2] !== B_01_expected_prev[2] )
		&& ((B_01_expected_prev[2] !== last_B_01_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_01[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_01_expected_prev);
		$display ("     Real value = %b", B_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_B_01_exp[2] = B_01_expected_prev[2];
	end
	if (
		( B_01_expected_prev[3] !== 1'bx ) && ( B_01_prev[3] !== B_01_expected_prev[3] )
		&& ((B_01_expected_prev[3] !== last_B_01_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_01[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_01_expected_prev);
		$display ("     Real value = %b", B_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_B_01_exp[3] = B_01_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sys_choice_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A0_01;
reg [3:0] A1_01;
reg choice_01;
// wires                                               
wire [3:0] B_01;

wire sampler;                             

// assign statements (if any)                          
sys_choice i1 (
// port map - connection between master ports and signals/registers   
	.A0_01(A0_01),
	.A1_01(A1_01),
	.B_01(B_01),
	.choice_01(choice_01)
);
// A0_01[ 3 ]
initial
begin
	repeat(6)
	begin
		A0_01[3] = 1'b0;
		A0_01[3] = #80000 1'b1;
		# 80000;
	end
	A0_01[3] = 1'b0;
end 
// A0_01[ 2 ]
initial
begin
	repeat(12)
	begin
		A0_01[2] = 1'b0;
		A0_01[2] = #40000 1'b1;
		# 40000;
	end
	A0_01[2] = 1'b0;
end 
// A0_01[ 1 ]
always
begin
	A0_01[1] = 1'b0;
	A0_01[1] = #20000 1'b1;
	#20000;
end 
// A0_01[ 0 ]
always
begin
	A0_01[0] = 1'b0;
	A0_01[0] = #10000 1'b1;
	#10000;
end 
// A1_01[ 3 ]
initial
begin
	A1_01[3] = 1'b0;
	# 20000;
	repeat(6)
	begin
		A1_01[3] = 1'b1;
		A1_01[3] = #80000 1'b0;
		# 80000;
	end
	A1_01[3] = 1'b1;
end 
// A1_01[ 2 ]
initial
begin
	A1_01[2] = 1'b1;
	# 20000;
	repeat(12)
	begin
		A1_01[2] = 1'b0;
		A1_01[2] = #40000 1'b1;
		# 40000;
	end
	A1_01[2] = 1'b0;
end 
// A1_01[ 1 ]
always
begin
	A1_01[1] = 1'b1;
	A1_01[1] = #20000 1'b0;
	#20000;
end 
// A1_01[ 0 ]
always
begin
	A1_01[0] = 1'b0;
	A1_01[0] = #10000 1'b1;
	#10000;
end 

// choice_01
initial
begin
	choice_01 = 1'b0;
end 

sys_choice_vlg_sample_tst tb_sample (
	.A0_01(A0_01),
	.A1_01(A1_01),
	.choice_01(choice_01),
	.sampler_tx(sampler)
);

sys_choice_vlg_check_tst tb_out(
	.B_01(B_01),
	.sampler_rx(sampler)
);
endmodule

